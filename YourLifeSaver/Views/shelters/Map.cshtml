

@{
    ViewBag.Title = "information4";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<section class="features section-bg">
    <div class="container">
        <div class="section-title">

            <p data-aos="fade-in" style="text-align:left"><a href="~/Home">Home</a>&nbsp >> Find a safe place</p>
            <h2 data-aos="fade-in">
                Find an emergency shelter
            </h2>
            <p>Please input the suburb name or postcode of your friend's place in the search bar, to find the nearby shelters.</p>
            <p>If you can not see the shelter, please refresh the page</p>
        </div>

    </div>
</section>

<script src="https://api.mapbox.com/mapbox-gl-js/plugins/mapbox-gl-geocoder/v4.5.1/mapbox-gl-geocoder.min.js"></script>
<link rel="stylesheet"
      href="https://api.mapbox.com/mapbox-gl-js/plugins/mapbox-gl-geocoder/v4.5.1/mapbox-gl-geocoder.css"
      type="text/css" />
<!-- Promise polyfill script required to use Mapbox GL Geocoder in IE 11 -->
<script src="https://cdn.jsdelivr.net/npm/es6-promise@4/dist/es6-promise.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/es6-promise@4/dist/es6-promise.auto.min.js"></script>
<div id='map' style="height:600px;width:70%;margin:auto"></div>

<script src='https://api.tiles.mapbox.com/mapbox-gl-js/v1.1.1/mapbox-gl.js'></script>
<link href='https://api.tiles.mapbox.com/mapbox-gl-js/v1.1.1/mapbox-gl.css' rel='stylesheet' />

<script>


    var transformRequest = (url, resourceType) => {
        var isMapboxRequest =
            url.slice(8, 22) === "api.mapbox.com" ||
            url.slice(10, 26) === "tiles.mapbox.com";
        return {
            url: isMapboxRequest
                ? url.replace("?", "?pluginName=sheetMapper&")
                : url
        };
    };
    //YOUR TURN: add your Mapbox token
    mapboxgl.accessToken = 'pk.eyJ1IjoibWlzYWthZXJ1IiwiYSI6ImNrZ2RoOGFqcjAxcTMycm5wYzFhNWpqYWgifQ.Wr9fWRrTVVBznaTfuA0wfQ'; //Mapbox token
    var map = new mapboxgl.Map({
        container: 'map', // container id
        style: 'mapbox://styles/mapbox/streets-v11', //stylesheet location
        center: [144.972, -37.820], // starting position
        zoom: 12,// starting zoom
        transformRequest: transformRequest
    });
    var size = 80;

    var pulsingDot = {
        width: size,
        height: size,
        data: new Uint8Array(size * size * 4),

        onAdd: function () {
            var canvas = document.createElement('canvas');
            canvas.width = this.width;
            canvas.height = this.height;
            this.context = canvas.getContext('2d');
        },

        render: function () {
            var duration = 1000;
            var t = (performance.now() % duration) / duration;

            var radius = size / 2 * 0.3;
            var outerRadius = size / 2 * 0.7 * t + radius;
            var context = this.context;

            // draw outer circle
            context.clearRect(0, 0, this.width, this.height);
            context.beginPath();
            context.arc(this.width / 2, this.height / 2, outerRadius, 0, Math.PI * 2);
            context.fillStyle = 'rgba(255, 200, 200,' + (1 - t) + ')';
            context.fill();

            // draw inner circle
            context.beginPath();
            context.arc(this.width / 2, this.height / 2, radius, 0, Math.PI * 2);
            context.fillStyle = 'rgba(255, 100, 100, 1)';
            context.strokeStyle = 'white';
            context.lineWidth = 2 + 4 * (1 - t);
            context.fill();
            context.stroke();

            // update this image's data with data from the canvas
            this.data = context.getImageData(0, 0, this.width, this.height).data;

            // keep the map repainting
            map.triggerRepaint();

            // return `true` to let the map know that the image was updated
            return true;
        }
    };



    $(document).ready(function () {
        $.ajax({
            type: "GET",
            //YOUR TURN: Replace with csv export link
            url: 'https://docs.google.com/spreadsheets/d/1EVNoCAm170PUCm_V3OZRErgTNAomTU69tFCmCgCLe3A/gviz/tq?tqx=out:csv&sheet=Sheet1',
            dataType: "text",
            success: function (csvData) { makeGeoJSON(csvData); }
        });



        function makeGeoJSON(csvData) {
            csv2geojson.csv2geojson(csvData, {
                latfield: 'Latitude',
                lonfield: 'Longitude',
                delimiter: ','
            }, function (err, data1) {
                map.on('load', function () {
                    map.addImage('pulsing-dot', pulsingDot, { pixelRatio: 2 })
                    //Add the the layer to the map
                    map.addLayer({
                        "id": "points",
                        "type": "symbol",
                        "source": {
                            "type": "geojson",
                            "data":data1
                        },
                        "layout": {
                            "icon-image": "pulsing-dot"
                        }
                    });


                    // When a click event occurs on a feature in the csvData layer, open a popup at the
                    // location of the feature, with description HTML from its properties.
                    map.on('click', 'points', function (e) {
                        var coordinates = e.features[0].geometry.coordinates.slice();

                        //set popup text
                        //You can adjust the values of the popup to match the headers of your CSV.
                        // For example: e.features[0].properties.Name is retrieving information from the field Name in the original CSV.
                        var description = `<h3>` + e.features[0].properties.Name + `</h3>` + `<h4>` + `<b>` + `Address: ` + `</b>` + e.features[0].properties.Address1 + e.features[0].properties.Address2 + `</h4>` + `<h4>` + `<b>` + `Phone: ` + `</b>` + e.features[0].properties.Phone + `</h4>`;

                        // Ensure that if the map is zoomed out such that multiple
                        // copies of the feature are visible, the popup appears
                        // over the copy being pointed to.
                        while (Math.abs(e.lngLat.lng - coordinates[0]) > 180) {
                            coordinates[0] += e.lngLat.lng > coordinates[0] ? 360 : -360;
                        }

                        //add Popup to map

                        new mapboxgl.Popup()
                            .setLngLat(coordinates)
                            .setHTML(description)
                            .addTo(map);
                    });

                    // Change the cursor to a pointer when the mouse is over the places layer.
                    map.on('mouseenter', 'csvData', function () {
                        map.getCanvas().style.cursor = 'pointer';
                    });

                    // Change it back to a pointer when it leaves.
                    map.on('mouseleave', 'places', function () {
                        map.getCanvas().style.cursor = '';
                    });

                    var bbox = turf.bbox(data1);
                    map.fitBounds(bbox, { padding: 50 });




                });

            });
        };

        // Search function
        map.addControl(
            new MapboxGeocoder({
                accessToken: mapboxgl.accessToken,
                mapboxgl: mapboxgl
            })
        );
    });
</script>

<style>

    /* Popup styling */

    .mapboxgl-popup {
        padding-bottom: 5px;
    }

    .mapboxgl-popup-close-button {
        display: none;
    }

    .mapboxgl-popup-content {
        font: 400 15px/22px 'Source Sans Pro', 'Helvetica Neue', Sans-serif;
        padding: 0;
        width: 250px;
    }

    .mapboxgl-popup-content-wrapper {
        padding: 1%;
    }

    .mapboxgl-popup-content h3 {
        background: rgb(61, 59, 59);
        text-align: center;
        color: #fff;
        margin: 0;
        display: block;
        padding: 15px;
        font-weight: 700;
        margin-top: -5px;
    }

    .mapboxgl-popup-content h4 {
        margin: 0;
        display: block;
        padding: 10px 3px 10px 10px;
        font-weight: 400;
    }

    .mapboxgl-container {
        cursor: pointer;
    }

    .mapboxgl-popup-anchor-top > .mapboxgl-popup-content {
        margin-top: 3px;
    }

    .mapboxgl-popup-anchor-top > .mapboxgl-popup-tip {
        border-bottom-color: rgb(61, 59, 59);
    }
</style>


